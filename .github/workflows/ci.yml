name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Prevent concurrent deployments on the same branch
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

# Add permissions for OIDC
permissions:
  id-token: write # Required for requesting the JWT
  contents: read # Required for actions/checkout

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run lint
        run: pnpm lint

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run type check
        run: pnpm check-types

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: ecocast_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ecocast_test
          JWT_SECRET: test_secret_key # Use a dummy secret for testing

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, type-check, test]
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8.15.4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build all apps and packages
        run: pnpm build
      # No artifact upload needed for deployment jobs as they rebuild/re-pull

  # --- Deployment Jobs --- #
  # These jobs run only on push events to the main branch

  deploy-backend:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production # Optional: Define a GitHub environment for protection rules
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecocast-api # Use the actual repository name directly
          IMAGE_TAG: ${{ github.sha }}
        run: |
          IMAGE_URI_SHA=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          IMAGE_URI_LATEST=$ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Building image $IMAGE_URI_SHA and $IMAGE_URI_LATEST..."
          docker build -t $IMAGE_URI_SHA -t $IMAGE_URI_LATEST -f apps/api/Dockerfile .
          echo "Pushing image $IMAGE_URI_SHA..."
          docker push $IMAGE_URI_SHA
          echo "Pushing image $IMAGE_URI_LATEST..."
          docker push $IMAGE_URI_LATEST
          echo "image=$IMAGE_URI_SHA" >> $GITHUB_OUTPUT # Output the SHA-tagged image URI

      # === Temporarily comment out migration step ===
      # - name: Run Database Migrations
      #   id: run-migration
      #   env:
      #     CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
      #     MIGRATION_TASK_DEF_ARN: ${{ secrets.ECS_MIGRATION_TASK_DEFINITION_ARN }}
      #     SUBNETS: ${{ secrets.PRIVATE_SUBNET_IDS }}
      #     SECURITY_GROUPS: ${{ secrets.ECS_SECURITY_GROUP_ID }}
      #     CONTAINER_NAME: ApiContainer
      #     IMAGE_URI: ${{ steps.build-image.outputs.image }} # Use the SHA-tagged image for migrations
      #   run: |
      #     echo "Starting migration task..."
      #     TASK_ARN=$(aws ecs run-task \
      #       --cluster $CLUSTER_NAME \
      #       --task-definition $MIGRATION_TASK_DEF_ARN \
      #       --launch-type FARGATE \
      #       --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUPS],assignPublicIp=DISABLED}" \
      #       --overrides '{ "containerOverrides": [{ "name": "'$CONTAINER_NAME'", "image": "'$IMAGE_URI'" }] }' \
      #       --query 'tasks[0].taskArn' --output text --region ${{ secrets.AWS_REGION }})
      #
      #     if [ -z "$TASK_ARN" ]; then
      #       echo "::error::Failed to start migration task."
      #       exit 1
      #     fi
      #     echo "Migration task started: $TASK_ARN"
      #     echo "task_arn=$TASK_ARN" >> $GITHUB_OUTPUT
      #
      #     echo "Waiting for migration task ($TASK_ARN) to complete..."
      #     aws ecs wait tasks-stopped --cluster $CLUSTER_NAME --tasks $TASK_ARN --region ${{ secrets.AWS_REGION }}
      #
      #     echo "Checking migration task status..."
      #     EXIT_CODE=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN --query 'tasks[0].containers[?name==`'$CONTAINER_NAME'`].exitCode | [0]' --output text --region ${{ secrets.AWS_REGION }})
      #
      #     echo "Migration task exit code: $EXIT_CODE"
      #
      #     if [ "$EXIT_CODE" != "0" ]; then
      #       echo "::error::Migration task failed with exit code $EXIT_CODE. Check ECS task logs for details (Log Group: /ecs/ecocast-api, Stream Prefix: migration)."
      #       exit 1
      #     else
      #       echo "Migration task completed successfully."
      #     fi

      - name: Render Amazon ECS task definition
        id: render-api-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ secrets.ECS_TASK_DEFINITION_ARN }}
          container-name: ApiContainer
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition (for API service)
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true

  deploy-frontend:
    name: Deploy Frontend to S3/CloudFront
    runs-on: ubuntu-latest
    needs: [deploy-backend] # Run after backend is deployed
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production # Optional: Define a GitHub environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and export Next.js static site
        run: pnpm build --filter=web
        env:
          # Provide the backend URL to the Next.js build process
          NEXT_PUBLIC_API_URL: ${{ secrets.BACKEND_SERVICE_URL }}
          # Set NODE_ENV if required by build scripts
          NODE_ENV: production

      - name: Deploy static site to S3
        run: |
          echo "Starting S3 sync..."
          aws s3 sync ./apps/web/out s3://${{ secrets.FRONTEND_S3_BUCKET_NAME }} --delete --exact-timestamps --region ${{ secrets.AWS_REGION }}
          if [ $? -ne 0 ]; then
            echo "::error::S3 sync failed."
            exit 1
          fi
          echo "Verifying S3 sync (checking for index.html)..."
          aws s3 ls s3://${{ secrets.FRONTEND_S3_BUCKET_NAME }}/index.html --region ${{ secrets.AWS_REGION }}
          if [ $? -ne 0 ]; then
            echo "::error::index.html not found in S3 bucket after sync."
            exit 1
          fi
          echo "S3 sync completed successfully."
        # Assumes the build output is in apps/web/out

      - name: Invalidate CloudFront cache
        run: |
          echo "Creating CloudFront invalidation..."
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.FRONTEND_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/index.html" "/_next/*" \
            --query 'Invalidation.Id' --output text --region ${{ secrets.AWS_REGION }})

          if [ -z "$INVALIDATION_ID" ]; then
            echo "::error::Failed to create CloudFront invalidation."
            exit 1
          fi
          echo "Waiting for invalidation $INVALIDATION_ID to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ secrets.FRONTEND_CLOUDFRONT_DISTRIBUTION_ID }} \
            --id $INVALIDATION_ID --region ${{ secrets.AWS_REGION }}
          echo "CloudFront invalidation completed."
